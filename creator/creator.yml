---
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    #set project name:
    prod_name: 'AVG_prod'

    vpc_name: "{{ prod_name }} VPC"
    igw_name: "{{ prod_name }} IGW"
    subnet_name: "{{ prod_name }} Subnet"
    security_group_name: "{{ prod_name }} Security Group"
    ec2_name: "{{ prod_name }} EC2"


    #set vars:

    region: 'us-east-2'
    state: 'present'
    az: 'us-east-2a'

    VPC_cidr_block: '10.0.0.0/16'
    subnet_cidr: '10.0.1.0/24'
    sg_cidr_ip: '0.0.0.0/0'
    EC2_instance_type: 't2.micro'
    EC2_image: 'ami-08962a4068733a2b6'
    quantity_instanses: '1'



  tasks:

      - name: Provision VPC with a given name
        ec2_vpc_net:
          region: "{{ region }}"
          name: "{{ vpc_name }}"
          cidr_block: "{{ VPC_cidr_block }}"
        register: ec2_vpc

      - name: create ec2 vpc internet gateway
        ec2_vpc_igw:
           vpc_id: "{{ ec2_vpc.vpc.id }}"
           region: "{{ region }}"
           state: "{{ state }}"
           tags:
             Name: "{{ igw_name }}"
        register: igw_result

      - name: create ec2 vpc subnet
        ec2_vpc_subnet:
          vpc_id: "{{ ec2_vpc.vpc.id }}"
          region: "{{ region }}"
          az: "{{ az }}"
          state: "{{ state }}"
          cidr: "{{ subnet_cidr }}"
          map_public: yes
          resource_tags:
            Name: "{{ subnet_name }}"
        register: subnet_result

      - name: create ec2 security group
        ec2_group:
          vpc_id: "{{ ec2_vpc.vpc.id }}"
          region: "{{ region }}"
          state: "{{ state }}"
          name: "{{ security_group_name }}"
          description: "{{ security_group_name }}"
          tags:
            Name: "{{ security_group_name }}"
          rules:
          - proto: tcp
            ports:
            - 22
            cidr_ip: "{{ sg_cidr_ip }}"
            rule_desc: allow all on port 22
        register: avg_security_group


      - name: Provision a set of instances
        ec2:
         region: "{{ region }}"
         group: "{{ security_group_name }}"
         instance_type: "{{ EC2_instance_type }}"
         image: "{{ EC2_image }}"
         vpc_subnet_id: "{{ subnet_result.subnet.id }}"
         wait: true
         exact_count: "{{ quantity_instanses }}"
         count_tag:
             Name: "{{ ec2_name }}"
         instance_tags:
             Name: "{{ ec2_name }}"
        register: ec2
